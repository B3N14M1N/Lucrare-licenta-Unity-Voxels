#include "MyDataStructs.cginc"
#include "MyMeshDataStructs.cginc"

#pragma kernel CSMain

RWStructuredBuffer<HeightMap> map;
RWStructuredBuffer<Voxel> voxelArray;
RWStructuredBuffer<float4> colorBuffer;
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<float3> normalBuffer;
RWStructuredBuffer<float2> uvBuffer;
RWStructuredBuffer<int> indexBuffer;
RWStructuredBuffer<uint> counter;

uint chunkWidth;
uint chunkHeight;
bool stressTest;

uint getVoxelIndex(uint3 idx)
{
    return idx.z + idx.y * (chunkWidth + 2) + idx.x * (chunkWidth + 2) * chunkHeight;
};

uint getMapIndex(uint3 idx)
{
    return idx.z + idx.x * (chunkWidth + 2);
};

bool VoxelIsSolid(uint3 pos)
{
    return voxelArray[getVoxelIndex(pos)].ID != 0;
};

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xz > chunkWidth) || any(id.xz < 1) || any(id.xz > chunkWidth + 2))
        return;
    
    HeightMap currentMap = map[getMapIndex(id)];
    uint maxHeight = GetSolid(currentMap);
    if (id.y < maxHeight)
    {
        /*
        if(!stressTest && id.y < maxHeight-1)
            return;
        */
        Voxel block = voxelArray[getVoxelIndex(id)];
        uint3 blockPos = uint3(id.x - 1, id.y, id.z - 1);
        if (block.ID == 0)
            return;
        
        uint vertCount = 0;
        uint triCount = 0;
        
        for (int i = 0; i < 6; i++)
        {
        
        //Check if there's a solid block against this face
            if ((id.y == 0 && i == 5)
                 || 
                (!(id.y == chunkHeight - 1 && i == 4) && VoxelIsSolid(id + FaceCheck[i])))
                    continue;
            
        //Draw this face
            counter.IncrementCounter();
            InterlockedAdd(counter[0], 4, vertCount);
            InterlockedAdd(counter[1], 6, triCount);
        
        //Collect the appropriate vertices from the default vertices and add the block position
            for (int j = 0; j < 4; j++)
            {
                vertexBuffer[vertCount + j] = Vertices[FaceVerticeIndex[i][j]] + blockPos;
                
                normalBuffer[vertCount + j] = FaceCheck[i];
                
                uvBuffer[vertCount + j] = verticeUVs[j];
                float vertexColor = float(id.y) / (chunkHeight);
                //colorBuffer[vertCount + j] = float4(float(id.x) / chunkWidth, float(id.y) / chunkHeight, float(id.z) / chunkWidth, float(255));
                colorBuffer[vertCount + j] = float4(vertexColor, vertexColor, vertexColor, float(255));
            }
        
            for (int k = 0; k < 6; k++)
            {
                indexBuffer[triCount + k] = vertCount + faceIndices[k];
            }
        }
    }
}
    
